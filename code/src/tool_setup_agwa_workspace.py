import os
import arcpy
import sys
sys.path.append(os.path.dirname(os.path.abspath(__file__)))
import code_setup_agwa_workspace as agwa
import importlib
importlib.reload(agwa)
import config
importlib.reload(config)


class SetupAgwaWorkspace(object):

    def __init__(self):
        """Define the tool (tool name is the name of the class)."""
        self.label = "Step 1 - Setup AGWA Workspace"
        self.description = "This tool sets up the AGWA workspace in the selected geodatabase. It creates the " \
                            "necessary tables and fields and populates them with the necessary information. It also " \
                            "creates the necessary rasters if they are not provided."
        self.canRunInBackground = False

    def getParameterInfo(self):
        """Define parameter definitions"""
        params = []

        # Input parameters
        params.append(arcpy.Parameter(
            displayName="AGWA Directory",
            name="AGWA_Directory",
            datatype="DEWorkspace",
            parameterType="Required",
            direction="Input"
        ))
        params[-1].filter.list = ['File System']

        params.append(arcpy.Parameter(
            displayName="Project Geodatabase",
            name="Delineation_Workspace",
            datatype="DEWorkspace",
            parameterType="Required",
            direction="Input"
        ))
        params[-1].filter.list = ['Local Database']

        params.append(arcpy.Parameter(
            displayName="Unfilled DEM",
            name="Unfilled_DEM",
            datatype="GPRasterLayer",
            parameterType="Required",
            direction="Input"
        ))
        params[-1].category = "Input Raster From User"

        raster_options = [
            ("Filled DEM", "Create_Filled_DEM", "Filled_DEM"),
            ("Flow Direction", "Create_Flow_Direction", "Flow_Direction"),
            ("Flow Accumulation", "Create_Flow_Accumulation", "Flow_Accumulation"),
            ("Flow Length Up", "Create_Flow_Length_Up", "Flow_Length_Up"),
            ("Slope", "Create_Slope", "Slope"),
            ("Aspect", "Create_Aspect", "Aspect")
        ]

        for display_name, create_param_name, input_param_name in raster_options:
            params.append(arcpy.Parameter(
                displayName=f"Create {display_name} Raster",
                name=create_param_name,
                datatype="GPBoolean",
                parameterType="Required",
                direction="Input"
            ))
            params[-1].value = False
            params[-1].category = "Input Rasters (From User or Auto-generated by AGWA)"

            params.append(arcpy.Parameter(
                displayName=f"{display_name} Raster",
                name=input_param_name,
                datatype="GPRasterLayer",
                parameterType="Optional",
                direction="Input"
            ))
            params[-1].enabled = False
            params[-1].category = "Input Rasters (From User or Auto-generated by AGWA)"

        params.append(arcpy.Parameter(
            displayName="Use Default AGWA Geodatabase for Created Rasters",
            name="Use_Default_AGWA_Raster_Gdb",
            datatype="GPBoolean",
            parameterType="Optional",
            direction="Input"
        ))
        params[-1].value = True
        params[-1].category = "Input Rasters (From User or Auto-generated by AGWA)"


        params.append(arcpy.Parameter(
            displayName="Custom Raster Geodatabase",
            name="Custom_Raster_Gdb",
            datatype="DEWorkspace",
            parameterType="Optional",
            direction="Input"
        ))
        params[-1].filter.list = ['Local Database']
        params[-1].enabled = False
        params[-1].category = "Input Rasters (From User or Auto-generated by AGWA)"


        return params

    def updateMessages(self, parameters):
        """Modify the messages created by internal validation for each tool parameter."""

        def check_directory(path, required_items):
            return all(os.path.exists(os.path.join(path, item)) for item in required_items)

        # Check AGWA directory
        if parameters[0].altered:
            agwa_directory = parameters[0].valueAsText
            required_items = ["lookup_tables.gdb", "models"]
            if not check_directory(agwa_directory, required_items):
                parameters[0].setErrorMessage("Invalid AGWA directory. "
                                              "It should contain 'lookup_tables.gdb' and 'models' folders.")

        # Check if geodatabase is already set up as AGWA workspace
        if parameters[1].value:
            project_gdb = parameters[1].valueAsText
            meta_workspace_table = os.path.join(project_gdb, "metaWorkspace")
            if arcpy.Exists(meta_workspace_table):
                parameters[1].setWarningMessage("This geodatabase is already set up as an AGWA workspace. "
                                                "Continuing will overwrite existing records.")

        # Ensure the input rasters are projected
        raster_params = [2, 4, 6, 8, 10, 12]  # Indices of raster parameters
        for param_index in raster_params:
            if parameters[param_index].value and parameters[param_index].value != True:
                raster = parameters[param_index].valueAsText
                if raster and arcpy.Exists(raster):
                    if arcpy.Describe(raster).SpatialReference.type == "Geographic":
                        msg = ("The selected raster has a Geographic spatial reference and a Projected spatial reference is " 
                            "required. Please select a raster with a Projected coordinate system. ")
                        parameters[param_index].setErrorMessage(msg)
                elif raster:
                    parameters[param_index].setErrorMessage(f"The specified raster does not exist: {raster}")

        # Check custom raster geodatabase
        if not parameters[-2].value and parameters[-1].altered:
            if not arcpy.Exists(parameters[-1].valueAsText):
                parameters[-1].setErrorMessage("The specified custom raster geodatabase does not exist.")

        return


    def updateParameters(self, parameters):
        """Modify the values and properties of parameters before internal
        validation is performed. This method is called whenever a parameter
        has been changed."""


        # Get all "Create" checkbox parameters
        create_params = parameters[3:-2:2]
        
        # Check if any "Create" checkbox is checked
        any_create_selected = any(param.value for param in create_params)

        # Update visibility and state of raster input fields
        for i, create_param in enumerate(create_params):
            raster_param = parameters[i*2 + 4]  # Corresponding raster input parameter
            raster_param.enabled = not create_param.value
            if create_param.value:
                raster_param.value = None

        # Update "Use default AGWA" and "Custom Raster Geodatabase" parameters
        use_default_agwa_param = parameters[-2]
        custom_raster_gdb_param = parameters[-1]

        if any_create_selected:
            use_default_agwa_param.enabled = True
            use_default_agwa_param.parameterType = "Required"
            if use_default_agwa_param.value is None:
                use_default_agwa_param.value = True
            custom_raster_gdb_param.enabled = not use_default_agwa_param.value
        else:
            use_default_agwa_param.enabled = False
            use_default_agwa_param.parameterType = "Optional"
            use_default_agwa_param.value = None
            custom_raster_gdb_param.enabled = False
            custom_raster_gdb_param.value = None

        return

    def execute(self, parameters, messages):
        """The source code of the tool."""
        arcpy.AddMessage("Script source: " + __file__)
        arcpy.AddMessage(f"Parallel Processing Factor set to: {config.PARALLEL_PROCESSING_FACTOR}")


        agwa_directory = parameters[0].valueAsText
        project_gdb = parameters[1].valueAsText
        unfilled_dem = parameters[2].valueAsText
        create_filled_dem = parameters[3].value
        filled_dem = parameters[4].valueAsText
        create_flow_direction = parameters[5].value
        fd = parameters[6].valueAsText
        create_flow_accumulation = parameters[7].value
        fa = parameters[8].valueAsText
        create_flow_length_up = parameters[9].value
        flup = parameters[10].valueAsText
        create_slope = parameters[11].value
        slope = parameters[12].valueAsText
        create_aspect = parameters[13].value
        aspect = parameters[14].valueAsText
        use_default_agwa_raster_gdb = parameters[15].value
        custom_raster_gdb = parameters[16].valueAsText

        agwa.setup_agwa_workspace(project_gdb, filled_dem, unfilled_dem, fd, fa, flup, slope,
                            aspect, agwa_directory, create_filled_dem, create_flow_direction,
                            create_flow_accumulation, create_flow_length_up, create_slope, create_aspect,
                            use_default_agwa_raster_gdb, custom_raster_gdb)

        return        
